---
import Layout from "../layouts/Layout.astro";
---

<Layout>
  <div class="strf-main-content">
    <section class="strf-section">
      <h1>Exports Usage</h1>
      <p>
        Storagefy provides a modular export system for maximum flexibility.
        Whether you're managing state across React, Vue (Pinia), or Svelte — or
        choosing between
        <code>localStorage</code>, <code>sessionStorage</code>, or <code
          >IndexedDB</code
        > — the exported modules are designed to be highly composable and framework-agnostic.
      </p>
    </section>

    <section class="strf-section">
      <h2>1. Importing Adapters</h2>
      <p>
        You can directly import individual storage and framework adapters for
        advanced use cases or custom integrations.
      </p>
      <pre
        class="strf-code-block">
        <code>
import &#123; IndexedDBAdapter &#125; from "storagefy";
import &#123; LocalStorageAdapter &#125; from "storagefy";
import &#123; SessionStorageAdapter &#125; from "storagefy";

import &#123; PiniaAdapter &#125; from "storagefy";
import &#123; ReactAdapter &#125; from "storagefy";
import &#123; SvelteAdapter &#125; from "storagefy";
        </code>
      </pre>
    </section>

    <section class="strf-section">
      <h2>2. Using <code>startStoragefy</code></h2>
      <p>
        This function initializes and returns a storage adapter instance based
        on the provided configuration. You can reuse this adapter across
        frameworks.
      </p>
      <pre
        class="strf-code-block">
        <code>
import &#123; startStoragefy &#125;  from "storagefy";
const adapter = startStoragefy(&#123;
  dbName: "my-app",
  adapter: "indexedDB", // or "localStorage" or "sessionStorage"
  encrypt: true,
  expireCheckInterval: 2000,
  channelName: "storagefy-sync" // sync changes across tabs/windows
  enableSyncTabs: false, // optional, default false - Whether to enable sync automatically on change key value
&#125;);
        </code>
      </pre>
      <p>
        If an adapter is already initialized and <code>forceRecreate</code> is not
        set to
        <code>true</code>, the same instance is reused.
      </p>
      <p>
        The <code>channelName</code> option creates a communication channel across
        browser tabs using <code>BroadcastChannel</code>, allowing real-time
        sync of updates in React, Vue (Pinia), or Svelte stores.
      </p>
    </section>

    <section class="strf-section">
      <h2>3. Retrieving Current Adapter</h2>
      <p>
        Once initialized with <code>startStoragefy</code>, you can retrieve the
        current adapter via:
      </p>
      <pre
        class="strf-code-block">
        <code>
import &#123; getStorageAdapter &#125; from "storagefy";          
const current = getStorageAdapter();
        </code>
      </pre>
    </section>

    <section class="strf-section">
      <h2>4. Framework Adapters</h2>

      <div class="strf-adapter">
        <h3>React</h3>
        <p>
          To use Storagefy with Zustand, Redux, Jotai, or custom React stores:
        </p>
        <pre
          class="strf-code-block">
          <code>
import &#123; getReactAdapter &#125; from "storagefy";
// startStoragefy() must be called first
const react = getReactAdapter(&#123;
  adapterParams: &#123; adapter: "localStorage", dbName: "my-react-app" &#125;
&#125;);
    
await getFromStorage(myStore, "user"); // THIS MUST BE CALLED FIRST THAN setInStorage

await setInStorage(myStore, "user", &#123;
  timeout: 3600000,
  ignoreKeys: ["tempId"],
  syncTabs: true
&#125;);
          </code>
        </pre>
        <p>Or use the helper:</p>
        <pre
          class="strf-code-block">
          <code>
// startStoragefy() must be called first
await setReactStorage(myStore, "settings", &#123;
  timeout: 300000, // expire after 5 minutes
  ignoreKeys: ["_temp", "loading"],
  syncTabs: true
&#125;);
          </code>
        </pre>
      </div>

      <div class="strf-adapter">
        <h3>Vue (Pinia)</h3>
        <p>Get a preconfigured Pinia adapter using:</p>
        <pre
          class="strf-code-block">
            <code>
// startStoragefy() must be called first
const &#123; setInStorage, getFromStorage &#125; = getPiniaAdapter(&#123;
  adapterParams: &#123; adapter: "sessionStorage" &#125;
&#125;);
    
await getFromStorage(myStore, "user"); // THIS MUST BE CALLED FIRST THAN setInStorage
await setInStorage(myStore, "user", &#123;
  timeout: 3600000, // 1 hour
  ignoreKeys: ["tempId"],
  syncTabs: true
&#125;);
            </code>
          </pre>
        <p>Or use the helper:</p>
        <pre
          class="strf-code-block">
          <code>
await setPiniaStorage(myStore, "user", &#123;
  timeout: 3600000,
  ignoreKeys: ["tempId"],
  syncTabs: true
&#125;);
          </code>
        </pre>
      </div>

      <div class="strf-adapter">
        <h3>Svelte</h3>
        <p>Integrate Svelte writable or readable stores:</p>
        <pre
          class="strf-code-block">
          <code>
// startStoragefy() must be called first
const svelte = getSvelteAdapter(&#123;
  adapterParams: &#123; 
    adapter: "indexedDB" 
  &#125;
&#125;);
    
await getFromStorage(myStore, "theme"); // THIS MUST BE CALLED FIRST THAN setInStorage
await svelte.setInStorage(myStore, "theme", &#123;
  timeout: 86400000, // 24 hours
  ignoreKeys: ["preview"],
  syncTabs: true
&#125;);  
          </code>
        </pre>
        <p>Or simply use the shorthand:</p>
        <pre
          class="strf-code-block">
          <code>
// startStoragefy() must be called first            
await setSvelteStorage(myStore, "theme", &#123;
  timeout: 86400000,
  ignoreKeys: ["preview"],
  syncTabs: true
&#125;);
          </code>
        </pre>
      </div>

      <p>
        All <code>set*</code> functions accept the same parameters:
      </p>
      <ul>
        <li><code>store</code>: The store instance you want to persist</li>
        <li><code>id</code>: A string key under which to store the data</li>
        <li>
          <code>options</code> (optional):
          <ul>
            <li>
              <code>timeout</code>: Expiration duration in milliseconds for the
              stored data
            </li>
            <li>
              <code>ignoreKeys</code>: Array of property keys to exclude from
              persistence
            </li>
            <li>
              <code>syncTabs</code>: If <code>true</code>, enables cross-tab
              syncing using the <code>channelName</code>
            </li>
          </ul>
        </li>
      </ul>
    </section>

    <section class="strf-section">
      <h2>5. Exported API Summary</h2>
      <ul>
        <li>
          <code>IndexedDBAdapter</code>, <code>LocalStorageAdapter</code>, <code
            >SessionStorageAdapter</code
          >
        </li>
        <li>
          <code>PiniaAdapter</code>, <code>ReactAdapter</code>, <code
            >SvelteAdapter</code
          >
        </li>
        <li><code>startStoragefy(config)</code></li>
        <li><code>getStorageAdapter()</code></li>
        <li>
          <code>getPiniaAdapter()</code>, <code>getReactAdapter()</code>, <code
            >getSvelteAdapter()</code
          >
        </li>
        <li>
          <code>setPiniaStorage()</code>, <code>setReactStorage()</code>, <code
            >setSvelteStorage()</code
          >
        </li>
      </ul>
    </section>
  </div>
</Layout>
