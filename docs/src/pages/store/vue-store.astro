---
import Layout from "../../layouts/Layout.astro";
import STRGF_ShopDemo from "../../components/vue/STRGF_ShoppingDemo.vue";
---

<Layout>
  <div class="strf-main-content">
    <section class="strf-section">
      <h1>Vue Store Adapter</h1>
      <p>
        Storagefy's Vue adapter provides seamless integration with Vue's
        reactive state management systems, particularly focusing on Pinia
        stores. This adapter synchronizes your Vue store state with your chosen
        storage backend (localStorage, sessionStorage, or IndexedDB) with
        minimal configuration.
      </p>
    </section>

    <section class="strf-section">
      <h2>1. Basic Usage</h2>
      <p>
        The Vue adapter works primarily with Pinia, Vue's recommended state
        management solution, allowing you to persist your store state across
        page reloads and browser sessions.
      </p>
      <pre
        class="strf-code-block">
        <code>
import &#123; startStoragefy, getPiniaAdapter &#125; from "storagefy";

// Initialize the storage backend
startStoragefy(&#123;
  dbName: "my-vue-app",
  adapter: "indexedDB", // or "localStorage" or "sessionStorage"
  encrypt: true,
  channelName: "vue-sync" // for cross-tab synchronization
&#125;);

// Get the Pinia adapter
const &#123; setInStorage, getFromStorage &#125; = getPiniaAdapter();

// Connect with your store
const userStore = useUserStore();
await getFromStorage(userStore, "user"); // Always call this before setInStorage
await setInStorage(userStore, "user", &#123;
  timeout: 3600000, // 1 hour expiration
  ignoreKeys: ["tempData", "password"],
  syncTabs: true
&#125;);
        </code>
      </pre>
    </section>

    <section class="strf-section">
      <h2>2. Using the Helper Function</h2>
      <p>
        For a more concise approach, use the <code>setPiniaStorage</code> helper
        function:
      </p>
      <pre
        class="strf-code-block">
        <code>
import &#123; startStoragefy, setPiniaStorage &#125; from "storagefy";

// Initialize storage backend
startStoragefy(&#123;
  dbName: "my-vue-app",
  adapter: "localStorage"
&#125;);

// Use the helper function
const userStore = useUserStore();
await setPiniaStorage(userStore, "user", &#123;
  timeout: 86400000, // 24 hours
  ignoreKeys: ["sessionToken"],
  syncTabs: true
&#125;);
        </code>
      </pre>
    </section>

    <section class="strf-section">
      <h2>3. Test It</h2>
      <STRGF_ShopDemo client:load client:only />
    </section>

    <section class="strf-section">
      <h2>4. Advanced Configuration</h2>
      <p>
        You can directly instantiate the <code>PiniaAdapter</code> class for more
        advanced control:
      </p>
      <pre
        class="strf-code-block">
        <code>
import &#123; PiniaAdapter, IndexedDBAdapter &#125; from "storagefy";

// Create storage adapter instance
const storageAdapter = new IndexedDBAdapter(&#123; 
  dbName: "my-app",
  encrypt: true
&#125;);

// Create Pinia adapter with the storage adapter
const piniaAdapter = new PiniaAdapter(storageAdapter);

// Connect with your store
const settingsStore = useSettingsStore();
await piniaAdapter.getFromStorage(settingsStore, "app-settings");
await piniaAdapter.setInStorage(settingsStore, "app-settings", &#123;
  ignoreKeys: ["tempSettings"],
  timeout: 604800000 // 1 week
&#125;);
        </code>
      </pre>
    </section>

    <section class="strf-section">
      <h2>5. Configuration Options</h2>
      <p>
        The <code>setInStorage</code> method accepts the following options:
      </p>

      <div class="strf-options">
        <h3>Options Object</h3>
        <ul>
          <li>
            <code>ignoreKeys</code>: Array of store property keys to exclude
            from persistence
            <p class="strf-option-desc">
              Use this for sensitive data or temporary state that doesn't need
              persistence.
            </p>
          </li>
          <li>
            <code>timeout</code>: Expiration duration in milliseconds
            <p class="strf-option-desc">
              After this duration, the stored data will be considered expired
              and removed.
            </p>
          </li>
          <li>
            <code>syncTabs</code>: Boolean flag to enable cross-tab
            synchronization
            <p class="strf-option-desc">
              When true, changes made in one browser tab will be reflected in
              all others. Requires <code>channelName</code> to be set during <code
                >startStoragefy</code
              >.
            </p>
          </li>
        </ul>
      </div>
    </section>

    <section class="strf-section">
      <h2>6. Handling Store Changes</h2>
      <p>
        The Vue adapter automatically subscribes to store changes using Pinia's <code
          >$subscribe</code
        > method and persists updates to your chosen storage. When data changes in
        other tabs (with <code>syncTabs: true</code>), the adapter will update
        the local store without triggering additional storage operations.
      </p>

      <pre
        class="strf-code-block">
        <code>
// Store changes are automatically persisted
userStore.$patch(&#123; 
  name: "New Username",
  preferences: &#123; theme: "dark" &#125;
&#125;);

// The above change is automatically synchronized to storage
// and to other tabs if syncTabs is enabled
        </code>
      </pre>
    </section>

    <section class="strf-section">
      <h2>7. API Reference</h2>

      <div class="strf-api-method">
        <h3><code>getPiniaAdapter([options])</code></h3>
        <p>Returns a configured Pinia adapter instance. Options include:</p>
        <ul>
          <li>
            <code>adapterParams</code>: Configuration for the underlying storage
            adapter
          </li>
        </ul>
        <p>
          Returns: <code>&#123; setInStorage, getFromStorage &#125;</code> methods
        </p>
      </div>

      <div class="strf-api-method">
        <h3><code>setPiniaStorage(store, key, [options])</code></h3>
        <p>
          Helper function that internally calls <code>getFromStorage</code> followed
          by <code>setInStorage</code>.
        </p>
        <ul>
          <li><code>store</code>: Pinia store instance</li>
          <li><code>key</code>: Storage key string</li>
          <li>
            <code>options</code>: Configuration options (ignoreKeys, timeout,
            syncTabs)
          </li>
        </ul>
        <p>Returns: Promise resolving to true on success</p>
      </div>

      <div class="strf-api-method">
        <h3><code>PiniaAdapter</code> Class Methods</h3>
        <ul>
          <li>
            <code>setInStorage(store, key, options)</code>: Persists store state
            and sets up subscription
          </li>
          <li>
            <code>getFromStorage(store, key)</code>: Loads persisted state into
            store
          </li>
          <li>
            <code>destroy()</code>: Cleans up subscriptions when adapter is no
            longer needed
          </li>
        </ul>
      </div>
    </section>

    <section class="strf-section">
      <h2>8. Best Practices</h2>
      <ul>
        <li>
          Always call <code>getFromStorage</code> before <code
            >setInStorage</code
          > to hydrate your store with existing data
        </li>
        <li>
          Use <code>ignoreKeys</code> for sensitive data like authentication tokens
          or large temporary objects
        </li>
        <li>
          Set appropriate <code>timeout</code> values for different types of data
          (e.g., longer for preferences, shorter for session data)
        </li>
        <li>
          Enable <code>syncTabs</code> for shared state across multiple browser tabs
        </li>
        <li>
          Consider using encryption (<code>encrypt: true</code>) when storing
          sensitive user data
        </li>
      </ul>
    </section>
  </div>
</Layout>
