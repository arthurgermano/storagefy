import{S as h,l as i,g as c,a,s as g}from"./StorageAdapter.DFwS-N09.js";import"./_commonjsHelpers.Cpj98o6Y.js";class d extends h{constructor({dbName:e,version:t=1,encrypt:r=!1,expireCheckInterval:s=1e3,channelName:n=!1,description:o="",enableSyncTabs:l=!1}){if(super(n),typeof sessionStorage>"u")throw i("SessionStorage is not available in this environment"),new Error("SessionStorage is not available in this environment");this.dbName=e,this.encrypt=r,this.expireKey=`STRGF_${e}__expires`,this.metaKey=`STRGF_${e}__meta`,this.prefix=`${e}__`,this.adapterId=c(e),this.expireCheckInterval=s,this.enableSyncTabs=l||!1,this._initMeta({dbName:e,version:t,description:o}),this._startExpireWatcher(),this._unloadHandler=()=>this.destroy(),window.addEventListener("beforeunload",this._unloadHandler),a(`SessionStorageAdapter - initialized with prefix: ${this.prefix}, encrypt: ${this.encrypt}`)}_initMeta({dbName:e,version:t,description:r}){try{a(`SessionStorageAdapter - Initializing metadata for ${e} v${t}`);const s={dbName:e,version:t,description:r,createdAt:Date.now()};sessionStorage.setItem(this.metaKey,JSON.stringify(s))}catch(s){i("Error initializing meta:",s)}}_loadExpires(){try{a("SessionStorageAdapter - Loading expiration map");const e=sessionStorage.getItem(this.expireKey);return e?JSON.parse(e):{}}catch(e){return i("Error loading expires:",e),{}}}async get(e){try{a(`SessionStorageAdapter - Getting key '${e}'`);const t=this._fullKey(e),r=sessionStorage.getItem(t);if(!r)return null;const s=await this.getExpire(e);return s&&Date.now()>=s?(await this.delete(e),null):await this._decrypt(e,r)}catch(t){return i(`Error getting key '${e}':`,t),null}}async set(e,t,r){try{if(a(`SessionStorageAdapter - Setting key: ${e}`,{value:t,expire:r}),!e&&!t)return!1;const s=this._fullKey(e);if(e&&t==null)return await this.delete(s),null;t=JSON.stringify(t);const n=await this._encrypt(e,t);return n?(sessionStorage.setItem(s,n),this.enableSyncTabs&&this.emitDataChange(e,n,"set"),typeof r!="number"?(await this.deleteExpire(e),!0):r>0?(await this.setExpire(e,Date.now()+r),!0):(await this.delete(e),null)):!1}catch(s){return i(`Error setting key '${e}':`,s),!1}}async delete(e){try{a(`SessionStorageAdapter - Deleting key '${e}'`);const t=this._fullKey(e);sessionStorage.removeItem(t);const r=this._loadExpires();delete r[e],sessionStorage.setItem(this.expireKey,JSON.stringify(r)),this.enableSyncTabs&&this.emitDataChange(e,void 0,"delete")}catch(t){i(`Error deleting key '${e}':`,t)}}async list(){const e=[];try{a(`SessionStorageAdapter - Listing keys with prefix '${this.prefix}'`);for(let t=0;t<sessionStorage.length;t++){let r=sessionStorage.key(t);if(this.encrypt&&(r=g(r)),!(r===this.metaKey||r===this.expireKey)&&r.startsWith(this.prefix)){const s=await this.get(r.replace(this.prefix,""));s!==null&&e.push({key:r.replace(this.prefix,""),value:s})}}}catch(t){throw i("Error listing keys:",t),t}return e}async has(e){try{a(`SessionStorageAdapter - Checking existence of key '${e}'`);const t=this._fullKey(e);return sessionStorage.getItem(t)!==null}catch(t){return i(`Error checking key '${e}':`,t),!1}}async clear(){try{a("SessionStorageAdapter - Clearing all data"),await this.reset(),sessionStorage.removeItem(this.metaKey),sessionStorage.removeItem(this.expireKey)}catch(e){i("Error clearing storage:",e)}}async reset(){try{a("SessionStorageAdapter - Resetting storage");const e=[];for(let t=0;t<sessionStorage.length;t++){const r=sessionStorage.key(t);r.startsWith(this.prefix)&&e.push(r)}for(const t of e)sessionStorage.removeItem(t),this.enableSyncTabs&&this.emitDataChange(t.replace(this.prefix,""),void 0,"reset")}catch(e){i("Error resetting storage:",e)}}async setExpire(e,t){try{a(`SessionStorageAdapter - Setting expire for key '${e}'`);const r=this._loadExpires();r[e]=t,sessionStorage.setItem(this.expireKey,JSON.stringify(r))}catch(r){i(`Error setting expire for key '${e}':`,r)}}async deleteExpire(e){try{a(`SessionStorageAdapter - Deleting expire for key '${e}'`);const t=this._loadExpires();delete t[e],sessionStorage.setItem(this.expireKey,JSON.stringify(t))}catch(t){i(`Error deleting expire for key '${e}':`,t)}}async clearExpire(){try{a("SessionStorageAdapter - Clearing expired keys");const e=Date.now(),t=this._loadExpires();let r=!1;for(const s in t)t[s]<=e&&(await this.delete(s),r=!0);r&&sessionStorage.setItem(this.expireKey,JSON.stringify(this._loadExpires()))}catch(e){i("Error clearing expired keys:",e)}}}export{d as default};
