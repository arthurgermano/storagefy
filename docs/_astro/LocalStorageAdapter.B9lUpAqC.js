import{S as c,l as i,g as h,a as s,s as g}from"./StorageAdapter.FmAxkOD1.js";import"./generateSimpleId.DxAnr5Wo.js";class y extends c{constructor({dbName:e,version:t=1,encrypt:r=!1,expireCheckInterval:a=1e3,description:o="",channelName:l=!1,enableSyncTabs:n=!1}){if(super(l),typeof localStorage>"u")throw i("LocalStorage is not available in this environment"),new Error("LocalStorage is not available in this environment");this.dbName=e,this.encrypt=r,this.expireKey=`STRGF_${e}__expires`,this.metaKey=`STRGF_${e}__meta`,this.prefix=`${e}__`,this.adapterId=h(e),this.expireCheckInterval=a,this.enableSyncTabs=n||!1,this._initMeta({dbName:e,version:t,description:o}),this._startExpireWatcher(),this._unloadHandler=()=>this.destroy(),window.addEventListener("beforeunload",this._unloadHandler),s(`LocalStorageAdapter -  initialized with dbName: ${e}, version: ${t}, encrypt: ${r}, description: ${o}`)}_initMeta({dbName:e,version:t,description:r}){try{s("LocalStorageAdapter - Initializing metadata for LocalStorageAdapter");const a={dbName:e,version:t,description:r,createdAt:Date.now()};localStorage.setItem(this.metaKey,JSON.stringify(a))}catch(a){i("Error initializing meta:",a)}}_loadExpires(){try{s("LocalStorageAdapter - Loading expiration metadata");const e=localStorage.getItem(this.expireKey);return e?JSON.parse(e):{}}catch(e){return i("Error loading expires:",e),{}}}async get(e){try{s(`LocalStorageAdapter - Getting key: ${e}`);const t=this._fullKey(e),r=localStorage.getItem(t);if(!r)return null;const a=await this.getExpire(e);return a&&Date.now()>=a?(await this.delete(e),null):await this._decrypt(e,r)}catch(t){return i(`Error getting key '${e}':`,t),null}}async set(e,t,r){try{if(s(`LocalStorageAdapter - Setting key: ${e}`,{value:t,expire:r}),!e&&!t)return!1;const a=this._fullKey(e);if(e&&t==null)return await this.delete(a),null;t=JSON.stringify(t);const o=await this._encrypt(e,t);return o?(localStorage.setItem(a,o),this.enableSyncTabs&&this.emitDataChange(e,void 0,"set"),typeof r!="number"?(await this.deleteExpire(e),!0):r>0?(await this.setExpire(e,Date.now()+r),!0):(await this.delete(e),null)):!1}catch(a){return i(`Error setting key '${e}':`,a),!1}}async delete(e){try{s(`LocalStorageAdapter - Deleting key: ${e}`);const t=this._fullKey(e);localStorage.removeItem(t);const r=this._loadExpires();delete r[e],localStorage.setItem(this.expireKey,JSON.stringify(r)),this.enableSyncTabs&&this.emitDataChange(e,void 0,"delete")}catch(t){i(`Error deleting key '${e}':`,t)}}async list(){const e=[];s(`LocalStorageAdapter - Listing keys with prefix: ${this.prefix}`);try{for(let t=0;t<localStorage.length;t++){let r=localStorage.key(t);if(this.encrypt&&(r=g(r)),!(r===this.metaKey||r===this.expireKey)&&r.startsWith(this.prefix)){const a=await this.get(r.replace(this.prefix,""));a!==null&&e.push({key:r.replace(this.prefix,""),value:a})}}}catch(t){throw i("Error listing keys:",t),t}return e}async has(e){try{s(`LocalStorageAdapter - Checking existence of key: ${e}`);const t=this._fullKey(e);return localStorage.getItem(t)!==null}catch(t){return i(`Error checking key '${e}':`,t),!1}}async clear(){try{s("LocalStorageAdapter - Clearing all data"),await this.reset(),localStorage.removeItem(this.metaKey),localStorage.removeItem(this.expireKey)}catch(e){i("Error clearing storage:",e)}}async reset(){try{s("LocalStorageAdapter - Resetting storage");const e=[];for(let t=0;t<localStorage.length;t++){const r=localStorage.key(t);r.startsWith(this.prefix)&&e.push(r)}for(const t of e)localStorage.removeItem(t),this.enableSyncTabs&&this.emitDataChange(t.replace(this.prefix,""),void 0,"reset")}catch(e){i("Error resetting storage:",e)}}async setExpire(e,t){try{s(`LocalStorageAdapter - Setting expiration for key: ${e}`,{timestamp:t});const r=this._loadExpires();r[e]=t,localStorage.setItem(this.expireKey,JSON.stringify(r))}catch(r){i(`Error setting expire for key '${e}':`,r)}}async deleteExpire(e){try{s(`LocalStorageAdapter - Deleting expiration for key: ${e}`);const t=this._loadExpires();delete t[e],localStorage.setItem(this.expireKey,JSON.stringify(t))}catch(t){i(`Error deleting expire for key '${e}':`,t)}}async clearExpire(){try{s("LocalStorageAdapter - Clearing expired keys");const e=Date.now(),t=this._loadExpires();let r=!1;for(const a in t)t[a]<=e&&(await this.delete(a),r=!0);r&&localStorage.setItem(this.expireKey,JSON.stringify(this._loadExpires()))}catch(e){i("Error clearing expired keys:",e)}}}export{y as default};
