---
import Layout from "../../layouts/Layout.astro";
---

<Layout>
  <div class="strf-main-content">
    <section class="strf-section">
      <h1>Session Storage Adapter</h1>
      <p>
        The <code>SessionStorageAdapter</code> extends the abstract <code
          >StorageAdapter</code
        > class, providing a concrete implementation for persisting data to browser's
        <code>sessionStorage</code>. Unlike <code>LocalStorageAdapter</code>,
        data stored with this adapter is cleared when the browser session ends.
        It offers enhanced capabilities including encryption, expiration
        management, metadata tracking, and optional cross-tab synchronization.
      </p>
    </section>

    <section class="strf-section">
      <h2>1. Getting Started</h2>
      <p>Initialize the adapter with the desired options:</p>
      <pre
        class="strf-code-block">
        <code>
import SessionStorageAdapter from "storagefy";

const adapter = new SessionStorageAdapter(&#123;
  dbName: "my-app",               // required - creates namespace for your keys
  encrypt: true,                  // optional, default false
  version: 1,                     // optional, default 1
  expireCheckInterval: 2000,      // optional, default 1000ms
  description: "Session store",   // optional
  channelName: "session-channel"  // optional - used for sync between tabs
  enableSyncTabs: false,          // optional, default false - Whether to enable sync automatically on change key value
&#125;);
        </code>
      </pre>
      <p>
        The <code>channelName</code> enables automatic synchronization of data across
        open tabs using the <code>CrossTabChannel</code> communication system. This
        is particularly useful for session-based applications where you want to maintain
        state consistency across multiple tabs within the same browser session.
      </p>
    </section>

    <section class="strf-section">
      <h2>2. Core Concepts</h2>

      <div class="strf-concept">
        <h3>Session-Based Storage</h3>
        <p>
          Unlike localStorage, data in sessionStorage is cleared when the page
          session ends â€” that is, when the tab is closed or the browser is shut
          down. This makes it ideal for temporary data that should not persist
          beyond the current browser session.
        </p>
      </div>

      <div class="strf-concept">
        <h3>Storage Namespacing</h3>
        <p>
          All keys are automatically namespaced using the format <code
            >&#123;dbName&#125;__</code
          > to avoid conflicts with other applications using sessionStorage. When
          encryption is enabled, keys are additionally obfuscated using a simple
          algorithm.
        </p>
      </div>

      <div class="strf-concept">
        <h3>Encryption</h3>
        <p>
          When the <code>encrypt: true</code> option is set, all values are encrypted
          before storage and decrypted when retrieved using the <code
            >cryptoHelper</code
          > module. Keys are also obfuscated to enhance security.
        </p>
      </div>

      <div class="strf-concept">
        <h3>Cross-Tab Communication</h3>
        <p>
          When a <code>channelName</code> is provided, changes to data are broadcast
          across browser tabs using the <code>CrossTabChannel</code> mechanism. This
          enables real-time synchronization of state across multiple open instances
          of your application within the same session.
        </p>
      </div>

      <div class="strf-concept">
        <h3>Expiration Management</h3>
        <p>
          The adapter includes a built-in expiration system that automatically
          removes expired items at regular intervals (configurable via <code
            >expireCheckInterval</code
          >). This helps manage temporary data without manual cleanup.
        </p>
      </div>
    </section>

    <section class="strf-section">
      <h2>3. Test It</h2>
      <div class="strf-demo">
        <div class="day-night-demo">
          <div class="sky">
            <div class="pacman"></div>
            <div class="ghost"></div>
            <div class="dots"></div>
          </div>
          <div class="ground"></div>
          <div style="text-align: center;">
            <small>
              <i>
                <a href="/storage/session-storage" target="_blank"
                  >Open a new tab in this page, when the animation ends it
                  should update the another tab as well</a
                >
              </i>
            </small>
            <br />
            <b>wait the animation to finish before go to another tab!</b>
          </div>
          <div class="controls">
            <button id="toggle-cycle" class="strf-button"
              >Toggle Chase Mode</button
            >
            <button id="reset-cycle" class="strf-button">Reset</button>
            <button id="toggle-encrypt" class="strf-button"
              >Turn Encryption ON</button
            >
          </div>
          <div class="storage-debug">
            <h4>SessionStorage Content:</h4>
            <pre id="storage-content"></pre>
          </div>
        </div>
      </div>
    </section>

    <section class="strf-section">
      <h2>4. API Reference</h2>

      <div class="strf-api-method">
        <h3>
          <code>await adapter.get(key)</code>
        </h3>
        <p>
          Retrieves a value. Returns <code>null</code> if not found or expired. Handles
          decryption automatically if encryption is enabled.
        </p>
        <pre
          class="strf-code-block">
          <code>
await adapter.set("sessionId", "abc123");
const value = await adapter.get("sessionId"); // "abc123"
          </code>
        </pre>
      </div>

      <div class="strf-api-method">
        <h3>
          <code>await adapter.set(key, value, expire?)</code>
        </h3>
        <p>
          Stores a value. Optional <code>expire</code> is in milliseconds from now.
          Handles encryption automatically if enabled and broadcasts changes to other
          tabs if using a channel.
        </p>
        <pre
          class="strf-code-block">
          <code>
// Save a form state that expires in 30 minutes
await adapter.set("formState", formData, 30 * 60 * 1000);
          </code>
        </pre>
      </div>

      <div class="strf-api-method">
        <h3>
          <code> await adapter.delete(key) </code>
        </h3>
        <p>
          Removes a key and its expiration metadata. Also broadcasts deletion to
          other tabs if using a channel.
        </p>
        <pre
          class="strf-code-block">
          <code>
await adapter.delete("sessionId");
          </code>
        </pre>
      </div>

      <div class="strf-api-method">
        <h3>
          <code>await adapter.list(prefix?)</code>
        </h3>
        <p>
          Returns all keys/values matching the prefix (defaults to all in
          namespace). Decrypts values if encryption is enabled.
        </p>
        <pre
          class="strf-code-block">
          <code>
await adapter.set("form.name", "John");
await adapter.set("form.email", "john@example.com");
const formData = await adapter.list("form."); 
// [&#123; key: "form.name", value: "John" &#125;, &#123; key: "form.email", value: "john@example.com" &#125;]
          </code>
        </pre>
      </div>

      <div class="strf-api-method">
        <h3>
          <code>await adapter.has(key)</code>
        </h3>
        <p>
          Returns <code>true</code> if the key exists in the session storage.
        </p>
        <pre
          class="strf-code-block">
          <code>
await adapter.has("sessionId"); // true or false
          </code>
        </pre>
      </div>

      <div class="strf-api-method">
        <h3><code>await adapter.clear()</code></h3>
        <p>
          Clears all data, including metadata and expirations, within this
          adapter's namespace.
        </p>
        <pre
          class="strf-code-block">
          <code>
await adapter.clear();
          </code>
        </pre>
      </div>

      <div class="strf-api-method">
        <h3>
          <code>await adapter.reset()</code>
        </h3>
        <p>
          Removes only data keys related to the namespace, not metadata. Useful
          for clearing user data while preserving system configuration.
        </p>
        <pre
          class="strf-code-block">
          <code>
await adapter.reset();
          </code>
        </pre>
      </div>

      <div class="strf-api-method">
        <h3>
          <code>await adapter.setExpire(key, timestamp)</code>
        </h3>
        <p>
          Set a custom expiration time (timestamp in ms) for a specific key.
        </p>
        <pre
          class="strf-code-block">
          <code>
const future = Date.now() + 10000;
await adapter.setExpire("sessionId", future);
          </code>
        </pre>
      </div>

      <div class="strf-api-method">
        <h3>
          <code>await adapter.getExpire(key)</code>
        </h3>
        <p>
          Returns the expiration timestamp for a key, or <code>null</code> if no
          expiration is set.
        </p>
        <pre
          class="strf-code-block">
          <code>
const expireTime = await adapter.getExpire("sessionId");
// Returns timestamp or null
          </code>
        </pre>
      </div>

      <div class="strf-api-method">
        <h3>
          <code>await adapter.deleteExpire(key)</code>
        </h3>
        <p>
          Removes the expiration for the given key, making it persist until the
          session ends.
        </p>
        <pre
          class="strf-code-block">
          <code>
await adapter.deleteExpire("sessionId");
          </code>
        </pre>
      </div>

      <div class="strf-api-method">
        <h3>
          <code>await adapter.clearExpire()</code>
        </h3>
        <p>Deletes all keys that have expired based on their timestamps.</p>
        <pre
          class="strf-code-block">
          <code>
await adapter.clearExpire();
          </code>
        </pre>
      </div>

      <div class="strf-api-method">
        <h3>
          <code>adapter.destroy()</code>
        </h3>
        <p>
          Cleans up resources, stops the expiration timer, and removes event
          listeners. Called automatically on page unload.
        </p>
        <pre
          class="strf-code-block">
          <code>
adapter.destroy(); // Clean up before component unmount
          </code>
        </pre>
      </div>

      <div class="strf-api-method">
        <h3>
          <code>adapter.emitDataChange(key, value, origin)</code>
        </h3>
        <p>
          Explicitly broadcasts a data change event to other tabs (usually
          called automatically by set/delete).
        </p>
        <pre
          class="strf-code-block">
          <code>
adapter.emitDataChange("wizard-state", newState, "tab-123");
          </code>
        </pre>
      </div>

      <div class="strf-api-method">
        <h3>
          <code>adapter.onDataChanged(callback)</code>
        </h3>
        <p>
          Registers a callback function to handle data changes from other tabs
          or contexts.
        </p>
        <pre
          class="strf-code-block">
          <code>
adapter.onDataChanged((&#123; key, value, origin &#125;) => &#123;
  console.log(`Session data for $&#123;key&#125; changed in tab $&#123;origin&#125;`);
  // Update UI or app state accordingly
&#125;);
          </code>
        </pre>
      </div>
    </section>

    <section class="strf-section">
      <h2>5. Advanced Usage</h2>

      <div class="strf-advanced">
        <h3>Multi-Step Form Data Management</h3>
        <p>
          The adapter is ideal for managing state in multi-step forms where you
          want to preserve progress within a session:
        </p>
        <pre
          class="strf-code-block">
          <code>
// Save form state after each step
function saveFormStep(stepNumber, formData) &#123;
  adapter.set(`form-step-$&#123;stepNumber&#125;`, formData);
&#125;

// Recover a specific step's data
async function loadFormStep(stepNumber) &#123;
  return await adapter.get(`form-step-$&#123;stepNumber&#125;`);
&#125;

// Check if a step has been completed
async function isStepCompleted(stepNumber) &#123;
  return await adapter.has(`form-step-$&#123;stepNumber&#125;`);
&#125;
          </code>
        </pre>
      </div>

      <div class="strf-advanced">
        <h3>Session Management</h3>
        <p>Managing user sessions with automatic expiration:</p>
        <pre
          class="strf-code-block">
          <code>
// Store session info with expiration
const sessionDuration = 20 * 60 * 1000; // 20 minutes
await adapter.set("session-token", token, sessionDuration);

// Extend session on activity
function extendSession() &#123;
  adapter.setExpire("session-token", Date.now() + sessionDuration);
&#125;

// Check if session is valid
async function isSessionActive() &#123;
  return await adapter.has("session-token");
&#125;
          </code>
        </pre>
      </div>

      <div class="strf-advanced">
        <h3>Multi-Tab Wizard Synchronization</h3>
        <p>Keep multi-step wizards in sync across tabs:</p>
        <pre
          class="strf-code-block">
          <code>
// In your wizard component
const wizardAdapter = new SessionStorageAdapter(&#123;
  dbName: "wizard",
  channelName: "wizard-sync"
&#125;);

// Update current step
function goToStep(stepNumber) &#123;
  wizardAdapter.set("current-step", stepNumber);
&#125;

// Listen for changes from other tabs
wizardAdapter.onDataChanged((&#123; key, value &#125;) => &#123;
  if (key === "current-step") &#123;
    // Update the UI to show the new step
    renderWizardStep(value);
  &#125;
&#125;);
          </code>
        </pre>
      </div>
    </section>

    <section class="strf-section">
      <h2>6. Comparison with LocalStorageAdapter</h2>

      <table class="strf-comparison-table">
        <thead>
          <tr>
            <th>Feature</th>
            <th>SessionStorageAdapter</th>
            <th>LocalStorageAdapter</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>Persistence</td>
            <td>Until tab/browser closes</td>
            <td>Indefinite (until manually cleared)</td>
          </tr>
          <tr>
            <td>Data Visibility</td>
            <td>Only within the same tab by default</td>
            <td>Available across all tabs/windows</td>
          </tr>
          <tr>
            <td>Best Use Cases</td>
            <td>Form state, wizards, temporary authentication</td>
            <td>User preferences, long-term settings, cached data</td>
          </tr>
          <tr>
            <td>Storage Limit</td>
            <td>~5MB per origin</td>
            <td>~5MB per origin</td>
          </tr>
          <tr>
            <td>Cross-Tab Sync</td>
            <td>Requires explicit <code>channelName</code></td>
            <td>Requires explicit <code>channelName</code></td>
          </tr>
        </tbody>
      </table>
    </section>

    <section class="strf-section">
      <h2>7. Notes</h2>
      <ul>
        <li>
          Data is automatically cleared when the browser session ends (tab
          closed, browser shut down).
        </li>
        <li>
          Keys are namespaced under <code>&#123;dbName&#125;__</code> to avoid conflicts.
        </li>
        <li>
          A <code>beforeunload</code> event listener is registered to properly clean
          up resources.
        </li>
        <li>
          Expirations are automatically checked and removed in intervals
          (default 1s).
        </li>
        <li>
          Encryption only applies if enabled via <code>encrypt: true</code> option.
        </li>
        <li>
          The adapter handles browser storage limits gracefully with error
          logging.
        </li>
        <li>
          Use <code>channelName</code> if you need to synchronize session data across
          multiple tabs.
        </li>
      </ul>
    </section>
  </div>
</Layout>

<script>
  // Wait for the DOM to be fully loaded
  document.addEventListener("DOMContentLoaded", async function () {
    try {
      await new Promise((resolve, reject) => {
        const script = document.createElement("script");
        script.src =
          "https://cdn.jsdelivr.net/npm/animejs@4.0.1/lib/anime.iife.min.js";
        script.onload = resolve;
        script.onerror = reject;
        document.head.appendChild(script);
      });

      const loadAdapter = await import(
        "../../../../src/adapters/SessionStorageAdapter.js"
      );

      const SessionStorageAdapter = loadAdapter.default;

      // Create our SessionStorage adapter
      const demoAdapter = new SessionStorageAdapter({
        dbName: "animation-demo-SS",
        expireCheckInterval: 0,
        channelName: "chase-channel",
      });

      // Elements
      const pacman = document.querySelector(".pacman");
      const ghost = document.querySelector(".ghost");
      const sky = document.querySelector(".sky");
      const toggleBtn = document.getElementById("toggle-cycle");
      const resetBtn = document.getElementById("reset-cycle");
      const encryptBtn = document.getElementById("toggle-encrypt");
      const storageContent = document.getElementById("storage-content");

      // Animation state
      let isNight = false;
      let animation = null;

      // Function to update storage debug display
      async function updateStorageDisplay() {
        const storageData = await demoAdapter.list();
        storageContent.textContent = JSON.stringify(storageData, null, 2);
      }

      // Load initial state from storage
      async function initializeState() {
        const storedState = await demoAdapter.get("isNight");
        if (storedState !== null) {
          isNight = storedState;
          if (isNight) {
            // If it's night, immediately set night state
            setNightState();
          } else {
            // If it's day, immediately set day state
            setDayState();
          }
        }
        updateStorageDisplay();
      }

      // Set immediate night state without animation
      function setNightState() {
        sky.style.backgroundColor = "#1a1a2e"; // Dark blue
        pacman.style.left = "70%";
        ghost.style.left = "20%";
        ghost.style.background = "#00FFFF"; // Cyan ghost at night
      }

      // Set immediate day state without animation
      function setDayState() {
        sky.style.backgroundColor = "#87CEEB"; // Sky blue
        pacman.style.left = "20%";
        ghost.style.left = "70%";
        ghost.style.background = "#FF0000"; // Red ghost during day
      }

      // Animate to night (ghost chases pacman)
      function animateToNight(skipEmit = false) {
        if (animation) animation.pause();

        animation = anime.createTimeline({
          easing: "easeInOutQuad",
          onComplete: async function () {
            await demoAdapter.set("isNight", true);
            if (!skipEmit) {
              demoAdapter.emitDataChange("isNight", true, "toNight");
            }
            updateStorageDisplay();
          },
        });

        animation
          .add(sky, { backgroundColor: "#1a1a2e" }, 0)
          .add(pacman, { left: "70%" }, 0)
          .add(ghost, { left: "20%", backgroundColor: "#00FFFF" }, 0);
      }

      // Animate to day (pacman chases ghost)
      function animateToDay(skipEmit) {
        if (animation) animation.pause();

        animation = anime.createTimeline({
          easing: "easeInOutQuad",
          onComplete: async function () {
            await demoAdapter.set("isNight", false);
            if (!skipEmit) {
              demoAdapter.emitDataChange("isNight", false, "toDay");
            }
            updateStorageDisplay();
          },
        });

        animation
          .add(sky, { backgroundColor: "#87CEEB" }, 0)
          .add(pacman, { left: "20%" }, 0)
          .add(ghost, { left: "70%", backgroundColor: "#FF0000" }, 0);
      }

      // Toggle cycle handler
      toggleBtn.addEventListener("click", function () {
        isNight = !isNight;
        if (isNight) {
          animateToNight();
        } else {
          animateToDay();
        }
      });

      // Reset handler
      resetBtn.addEventListener("click", async function () {
        await demoAdapter.clear();
        isNight = false;
        animateToDay();
        updateStorageDisplay();
      });

      // Encryption toggle handler
      encryptBtn.addEventListener("click", async function () {
        resetBtn.click(); // Reset the state
        if (demoAdapter.encrypt) {
          encryptBtn.textContent = "Turn Encryption ON";
          demoAdapter.encrypt = false;
        } else {
          encryptBtn.textContent = "Turn Encryption OFF";
          demoAdapter.encrypt = true;
        }
        toggleBtn.click(); // Trigger the animation
      });

      // Initialize
      initializeState();

      demoAdapter.onDataChanged(async (data) => {
        try {
          if (data.origin === "reset") {
            await demoAdapter.clear();
            updateStorageDisplay();
            return;
          }
          await demoAdapter.set("isNight", data.value);
          isNight = data.value;
          if (data.value) {
            animateToNight(true);
          } else {
            animateToDay(true);
          }
        } catch (error) {
          console.error("Error handling data change:", error);
          throw error;
        }
      });
    } catch (error) {
      console.error("Error initializing demo:", error);
    }
  });
</script>

<style>
  .strf-comparison-table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 20px;
    text-align: center;
  }

  .strf-demo {
    margin: 2rem 0;
    background: #f8f9fa;
    border-radius: 8px;
    padding: 1.5rem;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
  }

  .day-night-demo {
    width: 100%;
    max-width: 600px;
    margin: 0 auto;
  }

  .sky {
    height: 300px;
    background-color: #1a1a2e; /* Dark blue night color */
    border-radius: 8px 8px 0 0;
    position: relative;
    overflow: hidden;
    transition: background-color 0.5s;
  }

  .pacman {
    width: 60px;
    height: 60px;
    background: #ffff00;
    border-radius: 50%;
    position: absolute;
    top: 50%;
    left: 20%;
    transform: translateY(-50%);
    z-index: 10;
    clip-path: polygon(0 0, 100% 0, 100% 100%, 0 100%, 0 50%, 50% 50%);
    animation: chomp 0.3s infinite alternate;
  }

  .ghost {
    width: 60px;
    height: 60px;
    background: #ff0000;
    border-radius: 50% 50% 0 0;
    position: absolute;
    top: 50%;
    left: 70%;
    transform: translateY(-50%);
    z-index: 9;
    transition: background-color 0.5s;
  }

  .ghost:before {
    content: "";
    position: absolute;
    width: 100%;
    height: 20px;
    bottom: -10px;
    left: 0;
    background: inherit;
    clip-path: polygon(
      0 0,
      10px 100%,
      20px 0,
      30px 100%,
      40px 0,
      50px 100%,
      60px 0
    );
  }

  .ghost:after {
    content: "";
    position: absolute;
    width: 15px;
    height: 15px;
    background: white;
    border-radius: 50%;
    top: 15px;
    left: 10px;
    box-shadow: 25px 0 white;
  }

  .dots {
    position: absolute;
    width: 100%;
    height: 100%;
    background-image: radial-gradient(
        circle at 50px 150px,
        #ffff00 3px,
        transparent 3px
      ),
      radial-gradient(circle at 100px 50px, #ffff00 3px, transparent 3px),
      radial-gradient(circle at 200px 100px, #ffff00 3px, transparent 3px),
      radial-gradient(circle at 300px 200px, #ffff00 3px, transparent 3px),
      radial-gradient(circle at 400px 150px, #ffff00 3px, transparent 3px),
      radial-gradient(circle at 500px 50px, #ffff00 3px, transparent 3px);
    z-index: 8;
  }

  @keyframes chomp {
    0% {
      clip-path: polygon(0 0, 100% 0, 100% 100%, 0 100%, 0 50%, 50% 50%);
    }
    100% {
      clip-path: polygon(0 0, 100% 0, 100% 100%, 0 100%, 0 30%, 50% 50%);
    }
  }

  .ground {
    height: 100px;
    background: linear-gradient(to bottom, #5d8b5a, #3b5e48);
    border-radius: 0 0 8px 8px;
  }

  .controls {
    display: flex;
    gap: 10px;
    margin-top: 20px;
    justify-content: center;
  }

  .strf-button {
    background-color: #703ad5;
    color: white;
    border: none;
    padding: 10px 15px;
    border-radius: 4px;
    cursor: pointer;
    font-weight: 600;
    transition: background-color 0.2s;
  }

  .strf-button:hover {
    background-color: #2c5ea3;
  }

  .storage-debug {
    margin-top: 20px;
    padding: 15px;
    background: #f1f1f1;
    border-radius: 4px;
    font-size: 14px;
  }

  .storage-debug h4 {
    margin-top: 0;
    margin-bottom: 10px;
    color: #333;
  }

  #storage-content {
    background: #fff;
    color: black;
    padding: 10px;
    border-radius: 4px;
    max-height: 100px;
    overflow-y: auto;
    font-family: monospace;
    white-space: pre-wrap;
    word-break: break-all;
    font-size: 12px;
  }

  .pacman,
  .ghost,
  .dots,
  .sky {
    will-change: transform, opacity, background-color;
  }
</style>
