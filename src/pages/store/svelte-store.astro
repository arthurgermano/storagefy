---
import Layout from '../../layouts/Layout.astro';
import STRGF_ShopDemo from "../../components/svelte/STRGF_ShoppingDemo.svelte";
---

<Layout>
  <div class="strf-main-content">
    <section class="strf-section">
      <h1>Svelte Store Adapter</h1>
      <p>
        Storagefy's Svelte adapter provides seamless integration between Svelte's reactive stores and 
        your choice of persistent storage backend. This adapter works with Svelte's standard store contract, 
        allowing you to easily persist and synchronize writable stores across page reloads and browser sessions.
      </p>
    </section>

    <section class="strf-section">
      <h2>1. Basic Usage</h2>
      <p>
        The Svelte adapter works with Svelte's built-in stores, enabling straightforward state persistence 
        with minimal configuration:
      </p>
      <pre class="strf-code-block">
        <code>
import &#123; writable &#125; from 'svelte/store';
import &#123; startStoragefy, getSvelteAdapter &#125; from "storagefy";

// Initialize the storage backend
startStoragefy(&#123;
  dbName: "my-svelte-app",
  adapter: "indexedDB", // or "localStorage" or "sessionStorage"
  encrypt: true,
  channelName: "svelte-sync" // for cross-tab synchronization
&#125;);

// Create a Svelte store
const themeStore = writable(&#123; mode: 'light', accent: 'blue' &#125;);

// Get the Svelte adapter
const &#123; setInStorage, getFromStorage &#125; = getSvelteAdapter();

// Load existing data first
await getFromStorage(themeStore, "theme-settings");

// Then set up persistence
await setInStorage(themeStore, "theme-settings", &#123;
  timeout: 2592000000, // 30 days expiration
  ignoreKeys: ["tempTheme"],
  syncTabs: true
&#125;);
        </code>
      </pre>
    </section>

    <section class="strf-section">
      <h2>2. Using the Helper Function</h2>
      <p>
        For a more concise approach, use the <code>setSvelteStorage</code> helper function:
      </p>
      <pre class="strf-code-block">
        <code>
import &#123; writable &#125; from 'svelte/store';
import &#123; startStoragefy, setSvelteStorage &#125; from "storagefy";

// Initialize storage backend
startStoragefy(&#123;
  dbName: "my-svelte-app",
  adapter: "localStorage"
&#125;);

// Create a Svelte store
const userPrefs = writable(&#123;
  notifications: true,
  darkMode: false
&#125;);

// Use the helper function to load and persist in one step
await setSvelteStorage(userPrefs, "user-preferences", &#123;
  timeout: 86400000, // 24 hours
  ignoreKeys: ["tempPrefs"],
  syncTabs: true
&#125;);
        </code>
      </pre>
    </section>

    <section class="strf-section">
      <h2>3. Test It</h2>
      <STRGF_ShopDemo client:load client:only />
    </section>

    <section class="strf-section">
      <h2>4. Advanced Configuration</h2>
      <p>
        You can directly instantiate the <code>SvelteAdapter</code> class for more advanced control:
      </p>
      <pre class="strf-code-block">
        <code>
import &#123; writable &#125; from 'svelte/store';
import &#123; SvelteAdapter, IndexedDBAdapter &#125; from "storagefy";

// Create storage adapter instance
const storageAdapter = new IndexedDBAdapter(&#123; 
  dbName: "svelte-app",
  encrypt: true
&#125;);

// Create Svelte adapter with the storage adapter
const svelteAdapter = new SvelteAdapter(storageAdapter);

// Create a Svelte store
const cartStore = writable(&#123; items: [], total: 0 &#125;);

// Hydrate store from storage
await svelteAdapter.getFromStorage(cartStore, "shopping-cart");

// Set up persistence
await svelteAdapter.setInStorage(cartStore, "shopping-cart", &#123;
  ignoreKeys: ["pendingActions"],
  timeout: 3600000 // 1 hour
&#125;);
        </code>
      </pre>
    </section>

    <section class="strf-section">
      <h2>5. Configuration Options</h2>
      <p>
        The <code>setInStorage</code> method accepts the following options:
      </p>
      
      <div class="strf-options">
        <h3>Options Object</h3>
        <ul>
          <li>
            <code>ignoreKeys</code>: Array of store property keys to exclude from persistence
            <p class="strf-option-desc">
              Use this for sensitive data or temporary state that shouldn't be persisted.
            </p>
          </li>
          <li>
            <code>timeout</code>: Expiration duration in milliseconds
            <p class="strf-option-desc">
              After this duration, the stored data will be considered expired and removed.
            </p>
          </li>
          <li>
            <code>syncTabs</code>: Boolean flag to enable cross-tab synchronization
            <p class="strf-option-desc">
              When true, changes made in one browser tab will be reflected in all others.
              Requires <code>channelName</code> to be set during <code>startStoragefy</code>.
            </p>
          </li>
        </ul>
      </div>
    </section>

    <section class="strf-section">
      <h2>6. Store Compatibility</h2>
      <p>
        The Svelte adapter works with stores that follow Svelte's store contract:
      </p>
      <ul>
        <li>
          <strong>Writable stores</strong>: Full read/write support with <code>subscribe</code>, <code>set</code>, and <code>update</code> methods
        </li>
        <li>
          <strong>Custom stores</strong>: Compatible as long as they implement the <code>subscribe</code> and <code>set</code> methods
        </li>
      </ul>
      
      <pre class="strf-code-block">
        <code>
// Works with standard writable stores
import &#123; writable &#125; from 'svelte/store';
const standardStore = writable(&#123; count: 0 &#125;);

// Works with custom stores that implement the store contract
function createCustomStore(initial) &#123;
  const &#123; subscribe, set, update &#125; = writable(initial);
  
  return &#123;
    subscribe,
    set,
    increment: () => update(n => (&#123; count: n.count + 1 &#125;)),
    reset: () => set(&#123; count: 0 &#125;)
  &#125;;
&#125;

const customStore = createCustomStore(&#123; count: 0 &#125;);
await setSvelteStorage(customStore, "counter");
        </code>
      </pre>
    </section>

    <section class="strf-section">
      <h2>7. Cross-Tab Synchronization</h2>
      <p>
        When <code>syncTabs: true</code> is set, your Svelte stores will automatically stay in sync across browser tabs:
      </p>
      
      <pre class="strf-code-block">
        <code>
// In Tab 1
const sharedStore = writable(&#123; value: 'initial' &#125;);
await setSvelteStorage(sharedStore, "shared-data", &#123; syncTabs: true &#125;);

// Later in Tab 1
sharedStore.update(state => (&#123; ...state, value: 'updated' &#125;));

// In Tab 2 (automatically updated)
// sharedStore value will now be &#123; value: 'updated' &#125;
        </code>
      </pre>
      
      <p>
        This feature uses the <code>BroadcastChannel</code> API to synchronize changes across tabs or windows.
        Make sure to specify a <code>channelName</code> when calling <code>startStoragefy</code>.
      </p>
    </section>
    
    <section class="strf-section">
      <h2>8. API Reference</h2>
      
      <div class="strf-api-method">
        <h3><code>getSvelteAdapter([options])</code></h3>
        <p>
          Returns a configured Svelte adapter instance. Options include:
        </p>
        <ul>
          <li><code>adapterParams</code>: Configuration for the underlying storage adapter</li>
        </ul>
        <p>Returns: <code>&#123; setInStorage, getFromStorage &#125;</code> methods</p>
      </div>
      
      <div class="strf-api-method">
        <h3><code>setSvelteStorage(store, key, [options])</code></h3>
        <p>
          Helper function that internally calls <code>getFromStorage</code> followed by <code>setInStorage</code>.
        </p>
        <ul>
          <li><code>store</code>: Svelte writable store instance</li>
          <li><code>key</code>: Storage key string</li>
          <li><code>options</code>: Configuration options (ignoreKeys, timeout, syncTabs)</li>
        </ul>
        <p>Returns: Promise resolving to true on success</p>
      </div>
      
      <div class="strf-api-method">
        <h3><code>SvelteAdapter</code> Class Methods</h3>
        <ul>
          <li>
            <code>setInStorage(store, key, options)</code>: Persists store state and sets up subscription
          </li>
          <li>
            <code>getFromStorage(store, key)</code>: Loads persisted state into store
          </li>
          <li>
            <code>destroy()</code>: Cleans up subscriptions when adapter is no longer needed
          </li>
        </ul>
      </div>
    </section>

    <section class="strf-section">
      <h2>9. Best Practices</h2>
      <ul>
        <li>
          Always call <code>getFromStorage</code> before <code>setInStorage</code> to hydrate your store with existing data
        </li>
        <li>
          For simplicity, use the <code>setSvelteStorage</code> helper which handles this sequence automatically
        </li>
        <li>
          Use appropriate timeout values based on your data's volatility (longer for preferences, shorter for temporary state)
        </li>
        <li>
          Call <code>destroy()</code> on the adapter when you no longer need it to clean up subscriptions
        </li>
        <li>
          For larger applications, consider a more structured approach to key naming, such as prefixing with module names
        </li>
        <li>
          Be thoughtful about what you persist - don't store large objects unnecessarily
        </li>
      </ul>
    </section>
  </div>
</Layout>