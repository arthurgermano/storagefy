---
import Layout from '../../layouts/Layout.astro';
import STRGF_ShoppingDemoRedux from "../../components/react/STRGF_ShoppingDemoRedux.jsx";
import STRFG_ShoppingDemoJotai from "../../components/react/STRFG_ShoppingDemoJotai.jsx";
import STRFG_ShoppingDemoZustand from "../../components/react/STRFG_ShoppingDemoZustand.jsx";
---

<Layout>
  <div class="strf-main-content">
    <section class="strf-section">
      <h1>React Store Adapter</h1>
      <p>
        Storagefy's React adapter provides seamless persistence for your React state management solutions. 
        Compatible with popular libraries like Redux, Zustand, Jotai, and custom stores, this adapter synchronizes 
        your application state with your chosen storage backend across page reloads and browser sessions.
      </p>
    </section>

    <section class="strf-section">
      <h2>1. Basic Usage</h2>
      <p>
        The React adapter works with various React state management solutions, making it easy to persist 
        your application state:
      </p>
      <pre class="strf-code-block">
        <code>
import &#123; startStoragefy, getReactAdapter &#125; from "storagefy";

// Initialize the storage backend
startStoragefy(&#123;
  dbName: "my-react-app",
  adapter: "indexedDB", // or "localStorage" or "sessionStorage"
  encrypt: true,
  channelName: "react-sync" // for cross-tab synchronization
&#125;);

// Get the React adapter
const &#123; setInStorage, getFromStorage &#125; = getReactAdapter();

// Connect with your store (works with Redux, Zustand, and more)
await getFromStorage(store, "app-state"); // Always call this before setInStorage
await setInStorage(store, "app-state", &#123;
  timeout: 86400000, // 24 hour expiration
  ignoreKeys: ["temporaryData", "loadingStates"],
  syncTabs: true
&#125;);
        </code>
      </pre>
    </section>

    <section class="strf-section">
      <h2>2. Using the Helper Function</h2>
      <p>
        For a more concise approach, use the <code>setReactStorage</code> helper function:
      </p>
      <pre class="strf-code-block">
        <code>
import &#123; startStoragefy, setReactStorage &#125; from "storagefy";

// Initialize storage backend
startStoragefy(&#123;
  dbName: "my-react-app",
  adapter: "localStorage"
&#125;);

// Use the helper function to simplify the process
await setReactStorage(store, "app-state", &#123;
  timeout: 3600000, // 1 hour
  ignoreKeys: ["_temp", "loading"],
  syncTabs: true
&#125;);
        </code>
      </pre>
    </section>

    <section class="strf-section">
      <h2>3. Test It</h2>
      <h3>3.1 Redux</h3>
      <STRGF_ShoppingDemoRedux client:load client:only="react" />

      <h3>3.2 Zustand</h3>
      <STRFG_ShoppingDemoZustand client:load client:only="react" />

      <h3>3.3 Jotai</h3>
      <STRFG_ShoppingDemoJotai client:load client:only="react" />
    </section>

    <section class="strf-section">
      <h2>4. Advanced Configuration</h2>
      <p>
        You can directly instantiate the <code>ReactAdapter</code> class for more advanced control:
      </p>
      <pre class="strf-code-block">
        <code>
import &#123; ReactAdapter, IndexedDBAdapter &#125; from "storagefy";

// Create storage adapter instance
const storageAdapter = new IndexedDBAdapter(&#123; 
  dbName: "react-app",
  encrypt: true
&#125;);

// Create React adapter with the storage adapter
const reactAdapter = new ReactAdapter(storageAdapter);

// Connect with your store
await reactAdapter.getFromStorage(store, "user-settings");
await reactAdapter.setInStorage(store, "user-settings", &#123;
  ignoreKeys: ["authToken"],
  timeout: 604800000 // 1 week
&#125;);
        </code>
      </pre>
    </section>

    <section class="strf-section">
      <h2>5. Supported State Management Libraries</h2>
      <p>
        The React adapter is designed to work with multiple state management solutions:
      </p>
      
      <div class="strf-store-types">
        <h3>Redux</h3>
        <p>
          Works with standard Redux stores by utilizing <code>getState</code>, <code>dispatch</code>, and <code>subscribe</code> methods.
        </p>
        <pre class="strf-code-block">
          <code>
import &#123; createStore &#125; from 'redux';
import &#123; startStoragefy, setReactStorage &#125; from "storagefy";

const reducer = (state = &#123; count: 0 &#125;, action) => &#123;
  switch (action.type) &#123;
    case 'INCREMENT':
      return &#123; ...state, count: state.count + 1 &#125;;
    case 'SET_STATE_FROM_STORAGE': // Important: handle this action type
      return &#123; ...state, ...action.payload &#125;;
    default:
      return state;
  &#125;
&#125;;

const store = createStore(reducer);

// Persist Redux store
await setReactStorage(store, "redux-state");
          </code>
        </pre>
        <p>
          Note: Your Redux reducer should handle the <code>SET_STATE_FROM_STORAGE</code> action type
          for proper hydration from persistent storage.
        </p>
      </div>
      
      <div class="strf-store-types">
        <h3>Zustand</h3>
        <p>
          Compatible with Zustand stores using <code>getState</code>, <code>setState</code>, and <code>subscribe</code> methods.
        </p>
        <pre class="strf-code-block">
          <code>
import create from 'zustand';
import &#123; startStoragefy, setReactStorage &#125; from "storagefy";

const useStore = create((set) => (&#123;
  count: 0,
  increment: () => set((state) => (&#123; count: state.count + 1 &#125;)),
  reset: () => set(&#123; count: 0 &#125;)
&#125;));

// Persist Zustand store
await setReactStorage(useStore, "zustand-state");
          </code>
        </pre>
      </div>
      
      <div class="strf-store-types">
        <h3>Jotai</h3>
        <p>
          Works with Jotai atom values using <code>get</code>, <code>set</code>, and subscription mechanisms.
        </p>
        <pre class="strf-code-block">
          <code>
import &#123; atom, useAtom &#125; from 'jotai';
import &#123; atomWithStorage &#125; from 'jotai/utils';
import &#123; startStoragefy, getReactAdapter &#125; from "storagefy";

const countAtom = atom(0);

// For Jotai, you'll need a store-like wrapper
const jotaiStore = &#123;
  get: () => countAtom.init,
  set: (value) => &#123;
    countAtom.init = value;
    // Trigger updates to subscribers
  &#125;,
  subscribe: (callback) => &#123;
    // Setup subscription to atom changes
    // Return unsubscribe function
  &#125;
&#125;;

// Get the adapter
const &#123; setInStorage, getFromStorage &#125; = getReactAdapter();

// Persist Jotai state
await getFromStorage(jotaiStore, "jotai-state");
await setInStorage(jotaiStore, "jotai-state");
          </code>
        </pre>
      </div>
      
      <div class="strf-store-types">
        <h3>Custom React State Hooks</h3>
        <p>
          You can adapt custom React hooks or state management solutions by creating a compatible store interface.
        </p>
        <pre class="strf-code-block">
          <code>
import &#123; useState, useEffect &#125; from 'react';
import &#123; startStoragefy, setReactStorage &#125; from "storagefy";

// Create a store-like interface for your custom hook
function createStore(initialState) &#123;
  let state = initialState;
  const listeners = new Set();
  
  return &#123;
    getState: () => state,
    setState: (newState) => &#123;
      state = typeof newState === 'function' ? newState(state) : newState;
      listeners.forEach(listener => listener(state));
    &#125;,
    subscribe: (listener) => &#123;
      listeners.add(listener);
      return () => listeners.delete(listener);
    &#125;
  &#125;;
&#125;

const customStore = createStore(&#123; theme: 'light', language: 'en' &#125;);

// Persist custom store
await setReactStorage(customStore, "custom-state");
          </code>
        </pre>
      </div>
    </section>

    <section class="strf-section">
      <h2>6. Configuration Options</h2>
      <p>
        The <code>setInStorage</code> method accepts the following options:
      </p>
      
      <div class="strf-options">
        <h3>Options Object</h3>
        <ul>
          <li>
            <code>ignoreKeys</code>: Array of store property keys to exclude from persistence
            <p class="strf-option-desc">
              Use this for sensitive data, temporary state, or large objects that shouldn't be persisted.
            </p>
          </li>
          <li>
            <code>timeout</code>: Expiration duration in milliseconds
            <p class="strf-option-desc">
              After this duration, the stored data will be considered expired and removed.
            </p>
          </li>
          <li>
            <code>syncTabs</code>: Boolean flag to enable cross-tab synchronization
            <p class="strf-option-desc">
              When true, changes made in one browser tab will be reflected in all others.
              Requires <code>channelName</code> to be set during <code>startStoragefy</code>.
            </p>
          </li>
        </ul>
      </div>
    </section>

    <section class="strf-section">
      <h2>7. Cross-Tab Synchronization</h2>
      <p>
        The React adapter supports real-time synchronization of state across multiple browser tabs:
      </p>
      
      <pre class="strf-code-block">
        <code>
// Initialize with channel name for cross-tab communication
startStoragefy(&#123;
  dbName: "my-react-app",
  adapter: "indexedDB",
  channelName: "react-sync" // Required for cross-tab sync
&#125;);

// Enable syncTabs in your store configuration
await setReactStorage(store, "shared-state", &#123;
  syncTabs: true
&#125;);

// Now changes to this store in one tab will be reflected in other tabs
        </code>
      </pre>
      
      <p>
        The synchronization uses the <code>BroadcastChannel</code> API under the hood and
        intelligently handles different store types to apply updates appropriately.
      </p>
    </section>
    
    <section class="strf-section">
      <h2>8. API Reference</h2>
      
      <div class="strf-api-method">
        <h3><code>getReactAdapter([options])</code></h3>
        <p>
          Returns a configured React adapter instance. Options include:
        </p>
        <ul>
          <li><code>adapterParams</code>: Configuration for the underlying storage adapter</li>
        </ul>
        <p>Returns: <code>&#123; setInStorage, getFromStorage &#125;</code> methods</p>
      </div>
      
      <div class="strf-api-method">
        <h3><code>setReactStorage(store, key, [options])</code></h3>
        <p>
          Helper function that internally calls <code>getFromStorage</code> followed by <code>setInStorage</code>.
        </p>
        <ul>
          <li><code>store</code>: React state store instance (Redux, Zustand, etc.)</li>
          <li><code>key</code>: Storage key string</li>
          <li><code>options</code>: Configuration options (ignoreKeys, timeout, syncTabs)</li>
        </ul>
        <p>Returns: Promise resolving to true on success</p>
      </div>
      
      <div class="strf-api-method">
        <h3><code>ReactAdapter</code> Class Methods</h3>
        <ul>
          <li>
            <code>setInStorage(store, key, options)</code>: Persists store state and sets up subscription
          </li>
          <li>
            <code>getFromStorage(store, key)</code>: Loads persisted state into store
          </li>
          <li>
            <code>destroy()</code>: Cleans up subscriptions when adapter is no longer needed
          </li>
        </ul>
      </div>
    </section>

    <section class="strf-section">
      <h2>9. Best Practices</h2>
      <ul>
        <li>
          Always call <code>getFromStorage</code> before <code>setInStorage</code> to hydrate your store with existing data
        </li>
        <li>
          For Redux stores, ensure your reducer handles the <code>SET_STATE_FROM_STORAGE</code> action type
        </li>
        <li>
          Use <code>ignoreKeys</code> for sensitive information, temporary UI state, or large objects
        </li>
        <li>
          Set appropriate <code>timeout</code> values based on the nature of your data
        </li>
        <li>
          When using <code>syncTabs</code>, be mindful of complex state mutations that could conflict across tabs
        </li>
        <li>
          Call <code>destroy()</code> on the adapter instance when unmounting components to avoid memory leaks
        </li>
        <li>
          Consider using separate storage keys for different logical parts of your application state
        </li>
      </ul>
    </section>
  </div>
</Layout>